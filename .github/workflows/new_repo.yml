name: New Repo

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: 'Preview changes'
        default: true
env:
  GIT_HASH: ${{ vars.LAST_GITHUB_SHA }}

jobs:
  release_code:
    runs-on: ubuntu-latest
    steps:
      - name: Clone private repo
        uses: actions/checkout@v2
        with:
          path: private_repo
          ref: main
          fetch-depth: 0
      - name: Clone public repo
        uses: actions/checkout@v2
        with:
          path: public_repo2
          token: ${{ secrets.GIT_PASS }}
          repository: ${{ vars.PUBLIC_REPO }}
          ref: main
          fetch-depth: 0
#       - name: Clean public repo
#         run: |
#           set -e
#           mkdir -p public_repo
#           mv public_repo2/.git public_repo/
#           rm -rf public_repo2
#       - name: Copy release
#         run: |
#           set -e
#           rsync -crlvE ./private_repo/ ./public_repo/ \
#           --exclude .git --exclude .travis.yml --exclude .github \
#           --exclude sonar-project.properties
#       - name: Commits to public repo
#         run: |
#           set -e
#           cd public_repo2
#           git config user.email "ishautsou@ibagroup.eu"
#           git config user.name "Ihar Shautsou"
#           git status
#           git remote add private https://github.com/${{ github.repository }}.git
#           git remote update
#           echo https://github.com/${{ github.repository }}.git
#           echo ${{ env.GIT_HASH }}
#           git merge --allow-unrelated-histories ${{ env.GIT_HASH }} --abort
#           git commit -m "Release: v${{ github.event.inputs.RELEASE_VERSION }}"
#           git tag -f v${{ github.event.inputs.RELEASE_VERSION }}
#           if [[ "${{ github.event.inputs.DRY_RUN }}" != "true" ]]; then
#             git push -f --all
#             git push -f --tags
#           fi
#           NEW_HASH=$(echo $GITHUB_SHA)
#           echo ${{ env.GIT_HASH }}
#           echo $NEW_HASH
#           curl -L \
#             -X PATCH \
#             -H "Accept: application/vnd.github+json" \
#             -H "Authorization: Bearer ${{ secrets.GIT_PASS }}"\
#             -H "X-GitHub-Api-Version: 2022-11-28" \
#              https://api.github.com/repos/IShautsou-ibagroup-eu/argocd-vf-test/actions/variables/LAST_GITHUB_SHA \
#             -d "{\"name\":\"LAST_GITHUB_SHA\",\"value\":\"$NEW_HASH\"}"
#           git log --pretty=format:'%h %ad | %s%d' --graph --date=short -n 10 || true
#       - name: Clean public repo
#         run: |
#           set -e
#           mkdir -p public_repo
#           mv public_repo2/.git public_repo/
#           rm -rf public_repo2
#       - name: Copy release
#         run: |
#           set -e
#           rsync -crlvE ./private_repo/ ./public_repo/ \
#           --exclude .git1 --exclude .travis.yml --exclude .github \
#           --exclude sonar-project.properties
      - name: Commits to public repo
        run: |
          set -e
          mkdir -p new_repo
          cd new_repo
          git init
          git config user.email "ishautsou@ibagroup.eu"
          git config user.name "Ihar Shautsou"
          git remote add public https://github.com/IShautsou-ibagroup-eu/test_gitaction_merge.git
          git remote add private https://github.com/IShautsou-ibagroup-eu/argocd-vf-test.git
          git fetch public
          git fetch private
          git checkout -b main
          git merge public/main --allow-unrelated-histories
          git merge private/main --allow-unrelated-histories
          if [[ "${{ github.event.inputs.DRY_RUN }}" != "true" ]]; then
            git push public main -f --all --follow-tags
            git push private main -f --all --follow-tags
          fi
          git log --pretty=format:'%h %ad | %s%d' --graph --date=short -n 10 || true
